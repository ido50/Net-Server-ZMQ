#!/usr/bin/env perl

use local::lib './extlib';
use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;
use ZMQ::FFI;
use ZMQ::FFI::Constants qw/ZMQ_REQ/;

my $REQUEST_TIMEOUT = 10;
my $REQUEST_RETRIES = 2;
my $SERVER_ENDPOINT = 'tcp://localhost:6660';
my $CLIENT_IDENTITY;

my $help = 0;

GetOptions(
	't|timeout:i'	=> \$REQUEST_TIMEOUT,
	'r|retries:i'	=> \$REQUEST_RETRIES,
	'e|endpoint:s'	=> \$SERVER_ENDPOINT,
	'i|identity:s'	=> \$CLIENT_IDENTITY,
	'h|help'		=> \$help
) || pod2usage(2);

pod2usage(1)
	if $help;

$CLIENT_IDENTITY = "client_$$"
	unless defined $CLIENT_IDENTITY;

my $req = '';
$req .= $_
	while (<>);

chomp($req);

my $ctx = ZMQ::FFI->new;
my $s = req_connect();
my $reply = lp_send($req);

print "$reply\n";

$s->close;
$ctx->destroy;

sub req_connect {
	my $s = $ctx->socket(ZMQ_REQ);
	$s->set_identity($CLIENT_IDENTITY);
	$s->set_linger(0);
	$s->connect($SERVER_ENDPOINT);
	return $s;
}

sub lp_send {
	my $msg = shift;

	RETRY: foreach my $attempt (1..$REQUEST_RETRIES) {
		$s->send($msg);

		my $reply_msg;

		eval {
			local $SIG{ALRM} = sub { die "alarm\n" };
			alarm $REQUEST_TIMEOUT;
			while (!$s->has_pollin) {
				# nothing
			}
			$reply_msg = $s->recv;
			alarm 0;
		};
		if ($@) {
			die unless $@ eq "alarm\n";
			print "Timeout waiting for reply\n";
		} else {
			return $reply_msg;
		}

		if ($attempt < $REQUEST_RETRIES) {
			print "No response from server, retrying...\n";
			$s->close;
			print "Reconnecting to server...\n";
			$s = req_connect();
		}
	}

	print "Server seems to be offline, abandoning\n";
	exit 1;
}

__END__
=head1 NAME

zmq-client - Simple client for Net::Server::ZMQ

=head1 SYNOPSIS

	# on the command line

	echo "yo yo ma" | zmq-client --endpoint tcp://localhost:1234 --retries 3

	zmq-client --endpoint tcp://localhost:1234 --retries 3 < input.file

	# zmq-client will read from STDIN if nothing is provided, in which case
	# use Ctrl+D to terminate input

=head1 DESCRIPTION

This script implements the "lazy pirate client", as described in the L<ZeroMQ guide|http://zguide.zeromq.org/>,
for usage with L<Net::Server::ZMQ>. It supports request timeouts and retries.

=head1 OPTIONS

=head2 -t, --timeout

The maximum number of seconds to wait for server response, in seconds. Defaults to 10.

=head2 -r, --retries

The maximum number of tries to attempt contacting the server before giving up. Defaults to 2.

=head2 -e, --endpoint

The socket endpoint of the broker. Defaults to "tcp://localhost:6660".

=head2 -i, --identity

The client identity to use. Note that this must be unique. Defaults to C<client_$$>.

=head2 -h, --help

Displays help text.

=head1 BUGS AND LIMITATIONS

Please report any bugs or feature requests to
C<bug-Net-Server-ZMQ@rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net-Server-ZMQ>.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

	perldoc Net::Server::ZMQ

You can also look for information at:

=over 4
 
=item * RT: CPAN's request tracker
 
L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Net-Server-ZMQ>
 
=item * AnnoCPAN: Annotated CPAN documentation
 
L<http://annocpan.org/dist/Net-Server-ZMQ>
 
=item * CPAN Ratings
 
L<http://cpanratings.perl.org/d/Net-Server-ZMQ>
 
=item * Search CPAN
 
L<http://search.cpan.org/dist/Net-Server-ZMQ/>
 
=back
 
=head1 AUTHOR
 
Ido Perlmuter <ido@ido50.net>
 
=head1 LICENSE AND COPYRIGHT
 
Copyright (c) 2015, Ido Perlmuter C<< ido@ido50.net >>.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself, either version
5.8.1 or any later version. See L<perlartistic|perlartistic>
and L<perlgpl|perlgpl>.
 
The full text of the license can be found in the
LICENSE file included with this module.
 
=head1 DISCLAIMER OF WARRANTY
 
BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.
 
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

=cut